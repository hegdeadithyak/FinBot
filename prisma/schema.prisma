// prisma/schema.prisma — **minimal** schema for FinBot
// Focus: user auth (login/logout) + ChatGPT‑style conversation logging.
// Unused analytics, vector, memory tables have been removed.

/*───────────────────────────────────────────*/
/*  Prisma Generator & Datasource            */
/*───────────────────────────────────────────*/

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/*───────────────────────────────────────────*/
/*  Core Models                              */
/*───────────────────────────────────────────*/

model User {
  id              String        @id @default(cuid())
  email           String        @unique
  username        String?       @unique
  firstName       String?
  lastName        String?
  passwordHash    String
  emailVerified   Boolean       @default(false)
  preferredLanguage String      @default("English")

  // Activity tracking
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  lastLoginAt     DateTime?

  // Relations
  sessions        Session[]
  chatSessions    ChatSession[]
  messages        Message[]

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  sessionToken String   @unique
  expires      DateTime
  ipAddress    String?
  userAgent    String?
  isActive     Boolean  @default(true)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model ChatSession {
  id        String      @id @default(cuid())
  userId    String
  title     String?
  isActive  Boolean     @default(true)

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  endedAt   DateTime?

  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@map("chat_sessions")
}

model Message {
  id            String      @id @default(cuid())
  chatSessionId String
  userId        String
  role          MessageRole
  content       String
  tokenCount    Int?

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  chatSession   ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("messages")
}

/*───────────────────────────────────────────*/
/*  Enums                                   */
/*───────────────────────────────────────────*/

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}
